<?xml version="1.0"?>
<section xml:id="evolution_no-differentiation">
  <title>No Differentiation</title>
  <p>Before we run the simulation, we have to specify the behavior of <c>choose_dead</c> and <c>choose_replacements</c>. We'll start with simple versions of these functions that don't depend on fitness:</p>
  <pre># class Simulation

    def choose_dead(self, fits):
        n = len(self.agents)
        is_dead = np.random.random(n) &lt; 0.1
        index_dead = np.nonzero(is_dead)[0]
        return index_dead</pre>
  <p>In <c>choose_dead</c>, <c>n</c> is the number of agents and <c>is_dead</c> is a boolean array that contains <c>True</c> for the agents who die during this time step. In this version, every agent has the same probability of dying: 0.1. <c>choose_dead</c> uses <c>np.nonzero</c> to find the indices of the non-zero elements of <c>is_dead</c> (<c>True</c> is considered non-zero).</p>
  <pre># class Simulation

    def choose_replacements(self, n, fits):
        agents = np.random.choice(self.agents, size=n, replace=True)
        replacements = [agent.copy() for agent in agents]
        return replacements</pre>
  <p>In <c>choose_replacements</c>, <c>n</c> is the number of agents who reproduce during this time step. It uses <c>np.random.choice</c> to choose <c>n</c> agents with replacement. Then it invokes <c>copy</c> on each one and returns a list of new <c>Agent</c> objects.</p>
  <p>These methods don't depend on fitness, so this simulation does not have differential survival or reproduction. As a result, we should not expect to see evolution. But how can we tell?</p>
</section>
