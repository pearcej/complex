<?xml version="1.0"?>
<section xml:id="g-fig-5">
  <title>Probability of Connectivity</title>
  <figure align="center" xml:id="id1">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/"> Probability of connectivity with n=10 and a range of p. The vertical line shows the predicted critical value.</caption>
    <image source="Graphs/Figures/thinkcomplexity2005.png" width="50%" >
    <shortdescription>Line graph: probability of connectivity (n=10) vs. probability of edge (p).</shortdescription>
      <description>
        <p>The graph plots the probability of graph connectivity against the probability of an edge (<m>p</m>) for a graph with <m>n=10</m> nodes. The x-axis, labeled 'Prob of edge (p)', is on a logarithmic scale ranging from <m>10^{-2.5}</m> to <m>10^0=1</m>. The y-axis, labeled 'Prob connected', ranges linearly from 0.0 to 1.0. A blue S-shaped curve illustrates the relationship, showing the probability of connectivity rising from near 0 to near 1. The steepest part of this ascent occurs around <m>p \approx 0.23</m>. A vertical gray line at this x-value indicates the predicted critical value for <m>p</m>.</p>
      </description> </image>
  </figure>
  <figure align="center" xml:id="g-fig-6">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/"> Probability of connectivity for several values of n and a range of p.</caption>
    <image source="Graphs/Figures/thinkcomplexity2006.png" width="50%">
  <shortdescription>Connectivity probability vs. edge probability (p) for n=30, 100, 300.</shortdescription>
      <description>
        <p>This line graph shows how graph connectivity probability changes with varying numbers of nodes (<m>n</m>) and edge probability (<m>p</m>). The x-axis, 'Prob of edge (p)', is logarithmic (<m>10^{-2.5}</m> to <m>10^0</m>). The y-axis, 'Prob connected', ranges from 0.0 to 1.0.</p>
        <p>Three S-shaped curves are shown: a dark blue curve for <m>n=30</m>, a medium blue curve for <m>n=100</m>, and a light blue curve for <m>n=300</m>. Each curve has a faint vertical line at its critical point for <m>p</m>.</p>
        <p>As <m>n</m> increases, the S-curve (transition to connectivity) shifts left towards lower <m>p</m> values and becomes steeper, indicating a more abrupt transition.</p>
      </description> </image>
  </figure>
  <p>For given values of <m>n</m> and <m>p</m>, we would like to know the probability that <m>G(n, p)</m> is connected. We can estimate it by generating a large number of random graphs and counting how many are connected. Here's how:</p>
  <pre>def prob_connected(n, p, iters=100):
tf = [is_connected(make_random_graph(n, p))
      for i in range(iters)]
return np.mean(bool)</pre>
  <p>The parameters <c>n</c> and <c>p</c> are passed along to <c>make_random_graph</c>; <c>iters</c> is the number of random graphs we generate.</p>
  <p>The result, <c>tf</c>, is a list of boolean values: <c>True</c> for each graph that's connected and <c>False</c> for each one that's not.</p>
  <p><c>np.mean</c> is a NumPy function that computes the mean of this list, treating <c>True</c> as 1 and <c>False</c> as 0. The result is the fraction of random graphs that are connected.</p>
  <pre>&gt;&gt;&gt; prob_connected(10, 0.23, iters=10000)
0.33</pre>
  <p>We chose 0.23 because it is close to the critical value where the probability of connectivity goes from near 0 to near 1. According to Erd&#x151;s and R&#xE9;nyi, <m>p* = lnn / n = 0.23</m>.</p>
  <p>We can get a clearer view of the transition by estimating the probability of connectivity for a range of values of <m>p</m>:</p>
  <pre>n = 10
ps = np.logspace(-2.5, 0, 11)
ys = [prob_connected(n, p) for p in ps]</pre>
  <p>The NumPy function <c>logspace</c> returns an array of <m>11</m> values from <m>10^{&#x2212;2.5}</m> to <m>10^0 = 1</m>, equally spaced on a logarithmic scale.</p>
  <p>For each value of <c>p</c> in the array, we compute the probability that a graph with parameter <c>p</c> is connected and store the results in <c>ys</c>.</p>
  <p><xref ref="g-fig-5"/> shows the results, with a vertical line at the computed critical value, <m>p* = 0.23</m>. As expected, the transition from 0 to 1 occurs near the critical value.</p>
  <p><xref ref="g-fig-6"/> shows similar results for larger values of <c>n</c>. As <c>n</c> increases, the critical value gets smaller and the transition gets more abrupt.</p>
  <p>These experimental results are consistent with the analytic results Erd&#x151;s and R&#xE9;nyi presented in their papers.</p>
</section>
