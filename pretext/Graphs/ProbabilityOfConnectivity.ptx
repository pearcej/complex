<?xml version="1.0"?>
<section xml:id="graphs_probability-of-connectivity-g-fig-6-g-8-g-fig-5">
  <title>Probability of Connectivity</title>
  <figure align="center" xml:id="id1">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4.5: Probability of connectivity with n=10 and a range of p. The vertical line shows the predicted critical value.</caption>
    <image source="Graphs/Figures/thinkcomplexity2005.png" width="50%" alt="&quot;Figure 4.5: Probability of connectivity with n=10 and a range of p. The vertical line shows the predicted critical value&quot;"/>
  </figure>
  <figure align="center" xml:id="id2">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4.6: Probability of connectivity for several values of n and a range of p.</caption>
    <image source="Graphs/Figures/thinkcomplexity2006.png" width="50%" alt="&quot;Figure 4.6: Probability of connectivity for several values of n and a range of p.&quot;"/>
  </figure>
  <p>For given values of <math>n</math> and <math>p</math>, we would like to know the probability that <math>G(n, p)</math> is connected. We can estimate it by generating a large number of random graphs and counting how many are connected. Here's how:</p>
  <pre>def prob_connected(n, p, iters=100):
tf = [is_connected(make_random_graph(n, p))
      for i in range(iters)]
return np.mean(bool)</pre>
  <p>The parameters <c>n</c> and <c>p</c> are passed along to <c>make_random_graph</c>; <c>iters</c> is the number of random graphs we generate.</p>
  <p>The result, <c>tf</c>, is a list of boolean values: <c>True</c> for each graph that's connected and <c>False</c> for each one that's not.</p>
  <p><c>np.mean</c> is a NumPy function that computes the mean of this list, treating <c>True</c> as 1 and <c>False</c> as 0. The result is the fraction of random graphs that are connected.</p>
  <pre>&gt;&gt;&gt; prob_connected(10, 0.23, iters=10000)
0.33</pre>
  <p>We chose 0.23 because it is close to the critical value where the probability of connectivity goes from near 0 to near 1. According to Erd&#x151;s and R&#xE9;nyi, <math>p* = lnn / n = 0.23</math>.</p>
  <p>We can get a clearer view of the transition by estimating the probability of connectivity for a range of values of <math>p</math>:</p>
  <pre>n = 10
ps = np.logspace(-2.5, 0, 11)
ys = [prob_connected(n, p) for p in ps]</pre>
  <p>The NumPy function <c>logspace</c> returns an array of <math>11</math> values from <math>10^{&#x2212;2.5}</math> to <math>10^0 = 1</math>, equally spaced on a logarithmic scale.</p>
  <p>For each value of <c>p</c> in the array, we compute the probability that a graph with parameter <c>p</c> is connected and store the results in <c>ys</c>.</p>
  <p><xref ref="g-fig-5"/> shows the results, with a vertical line at the computed critical value, <math>p* = 0.23</math>. As expected, the transition from 0 to 1 occurs near the critical value.</p>
  <p><xref ref="g-fig-6"/> shows similar results for larger values of <c>n</c>. As <c>n</c> increases, the critical value gets smaller and the transition gets more abrupt.</p>
  <p>These experimental results are consistent with the analytic results Erd&#x151;s and R&#xE9;nyi presented in their papers.</p>
</section>
