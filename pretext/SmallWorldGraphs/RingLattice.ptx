<?xml version="1.0"?>
<section xml:id="swg-fig-1">
  <title>Ring lattice</title>
  <figure align="center" xml:id="id1">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/"> A ring lattice with <m>n=10</m> and <m>k=4</m>.</caption>
    <image source="SmallWorldGraphs/Figures/thinkcomplexity2007.png" width="50%" >
    <shortdescription>Ring lattice graph with 10 nodes, each connected to its 4 nearest neighbors.</shortdescription>
      <description>
        <p>The image displays a ring lattice graph characterized by <m>n=10</m> nodes and where each node has <m>k=4</m> neighbors (degree of 4). The ten nodes, labeled with integers from 0 to 9, are visually arranged in a circular pattern.</p>
        <p>Each node is connected by an undirected edge to its two closest neighbors in the clockwise direction and its two closest neighbors in the counter-clockwise direction along the ring. For example, node 0 is connected to nodes 1 and 2 (clockwise) and nodes 9 and 8 (counter-clockwise). This connectivity pattern, where each node is linked to its four nearest neighbors, is consistent for all nodes, illustrating the "wrap-around" characteristic of the ring lattice structure.</p>
      </description> </image>
  </figure>
  <p>A regular graph is a graph where each node has the same number of neighbors; the number of neighbors is also called the <term>degree</term> of the node.</p>
  <p>A <term>ring lattice</term> is a kind of regular graph, which Watts and Strogatz use as the basis of their model. In a ring lattice with <m>n</m> nodes, the nodes can be arranged in a circle with each node connected to the <m>k</m> nearest neighbors.</p>
  <p>For example, a ring lattice with <m>n=3</m> and <m>k=2</m> would contain the following edges: <m>(0, 1)</m>, <m>(1, 2)</m>, and <m>(2, 0)</m>. Notice that the edges <q>wrap around</q> from the highest-numbered node back to <m>0</m>.</p>
  <p>More generally, we can enumerate the edges like this:</p>
  <pre>def adjacent_edges(nodes, halfk):
n = len(nodes)
for i, u in enumerate(nodes):
    for j in range(i+1, i+halfk+1):
        v = nodes[j % n]
        yield u, v</pre>
  <p><c>adjacent_edges</c> takes a list of nodes and a parameter, <c>halfk</c>, which is half of <m>k</m>. It is a generator function that yields one edge at a time. It uses the modulus operator, <m>\%</m>, to wrap around from the highest-numbered node to the lowest.</p>
  <p>We can test it like this:</p>
  <pre>&gt;&gt;&gt; nodes = range(3)
&gt;&gt;&gt; for edge in adjacent_edges(nodes, 1):
...     print(edge)
(0, 1)
(1, 2)
(2, 0)</pre>
  <p>Now we can use <c>adjacent_edges</c> to make a ring lattice:</p>
  <pre>def make_ring_lattice(n, k):
G = nx.Graph()
nodes = range(n)
G.add_nodes_from(nodes)
G.add_edges_from(adjacent_edges(nodes, k//2))
return G</pre>
  <p>Notice that <c>make_ring_lattice</c> uses floor division to compute <c>halfk</c>, so it is only correct if <c>k</c> is even. If <c>k</c> is odd, floor division rounds down, so the result is a ring lattice with degree <c>k-1</c>. As one of the exercises at the end of the chapter, you will generate regular graphs with odd values of <c>k</c>.</p>
  <p>We can test <c>make_ring_lattice</c> like this:</p>
  <pre>lattice = make_ring_lattice(10, 4)</pre>
  <p><xref ref="swg-fig-1"/> shows the result.</p>
</section>
